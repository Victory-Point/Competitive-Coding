Problem Description:  Given a matrix of integers A of size N x M and an integer B. Write an efficient algorithm that searches for integer B in matrix A. This matrix A has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than or equal to the last integer of the previous row.
Return 1 if B is present in A, else return 0.

Problem Constraints:
1 <= N, M <= 1000
1 <= A[i][j], B <= 10^6

Sample Input: A = [ [1,   3,  5,  7],  [10, 11, 16, 20], [23, 30, 34, 50]  ] ; B = 3

Sample Output: 1

Explanation: 3 exists in the Matrix.

Code (C++):

vector<int> Solution::maxset(vector<int> &A) {
    int start = -1, length = -1,start_ind=-1,end_ind=-1;
    long max = -1,temp = -1;
    for(int i=0;i<A.size();i++){
        if(A[i]<0 ){
            temp = -1;
            start = -1;
        }
        else{
            if(temp == -1){
                start = i;
                temp = A[i];
            }
            else{
                temp += A[i];
            }
            if(temp > max){
                length = i-start+1;
                start_ind = start;
                end_ind = i;
                max = temp;
            }
            else if(temp==max && i-start+1>length){
                length = i-start+1;
                max = temp;
                start_ind = start;
                end_ind = i;
            }
        }
    }
    vector<int> ans;
    if(start_ind == -1){
        return ans;
    }
    for(int i=start_ind;i<=end_ind;i++){
        ans.push_back(A[i]);
    }
    return ans;
}

Question Link: https://leetcode.com/problems/search-a-2d-matrix/
