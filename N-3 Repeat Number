Problem Description: You're given a read only array of n integers. Find out if any integer occurs more than n/3 times in the array in linear time and constant additional space. If so, return the integer. If not, return -1.

If there are multiple solutions, return any one.

Sample Input: [1, 2, 3, 1, 1]

Sample Output: 1

Explanation: 1 occurs 3 times which is more than 5/3 times.

Code (C++):

int Solution::repeatedNumber(const vector<int> &A) {
    int count1 = 0, count2 = 0,candidate1 = INT_MAX,candidate2= INT_MAX;
    for(int i=0;i<A.size();i++){
        if(A[i] == candidate1){
            count1++;
        }
        else if(A[i] == candidate2){
            count2++;
        }
        else if(count1  == 0){
            candidate1 = A[i];
            count1++;
        }
        else if(count2 == 0){
            candidate2 = A[i];
            count2++;
        }
        else{
            count1--; count2--;
        }
    }
    count1 = 0; count2 = 0;
    for(int i=0;i<A.size();i++){
        if(A[i] == candidate1){
            count1++;
        }
        else if(A[i] == candidate2){
            count2++;
        }
    }
    if(count1>A.size()/3){
        return candidate1;
    }
    else if(count2>A.size()/3){
        return candidate2;
    }
    return -1;
}

Question Link: https://leetcode.com/problems/majority-element-ii/
