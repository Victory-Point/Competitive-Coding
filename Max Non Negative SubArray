Problem Description: Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A. Maximum sub-array is defined in terms of the sum of the elements in the sub-array. Find and return the required subarray.
NOTE: 
If there is a tie, then compare with segment's length and return segment which has maximum length.
If there is still a tie, then return the segment with minimum starting index.

Problem Constraints:
1 <= N <= 105
-109 <= A[i] <= 109

Sample Input: A = [1, 2, 5, -7, 2, 3]

Sample Output: [1, 2, 5]

Explanation: The two sub-arrays are [1, 2, 5] , [2, 3]. The answer is [1, 2, 5] as its sum is larger.

Code (C++):

vector<int> Solution::maxset(vector<int> &A) {
    int start = -1, length = -1,start_ind=-1,end_ind=-1;
    long max = -1,temp = -1;
    for(int i=0;i<A.size();i++){
        if(A[i]<0 ){
            temp = -1;
            start = -1;
        }
        else{
            if(temp == -1){
                start = i;
                temp = A[i];
            }
            else{
                temp += A[i];
            }
            if(temp > max){
                length = i-start+1;
                start_ind = start;
                end_ind = i;
                max = temp;
            }
            else if(temp==max && i-start+1>length){
                length = i-start+1;
                max = temp;
                start_ind = start;
                end_ind = i;
            }
        }
    }
    vector<int> ans;
    if(start_ind == -1){
        return ans;
    }
    for(int i=start_ind;i<=end_ind;i++){
        ans.push_back(A[i]);
    }
    return ans;
}

Question Link: https://www.interviewbit.com/problems/max-non-negative-subarray/
