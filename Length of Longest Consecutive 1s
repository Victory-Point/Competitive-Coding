Problem Description: Given a Binary String of length . It is allowed to do at most one swap between any 0 and 1. The task is to find the length of the longest consecutive 1â€™s that can be achieved.

Sample Input: nums = [111011101] 

Sample Output: 7

Explanation: We can swap 0 at 4th with 1 at 10th position.

CODE (C++):

int Solution::findMaxConsecutiveOnes(vector<int>& nums) {
        int num_zero = 0, max_length = 0;
        for(int i=0;i<nums.size();i++){
            if(nums[i] == 0){
                num_zero++;
            }
        }
        if(num_zero <= 1){
            return nums.size() - num_zero;
        }
        vector<int> left(nums.size(),0), right(nums.size(),0);
        left[0] = nums[0];
        for(int i=1;i<nums.size();i++){
            if(nums[i] == 0){
                left[i] = 0;
            }
            else{
                left[i] = left[i-1]+1;
            }
        }
        right[nums.size()-1] = nums[nums.size()-1];
        for(int i = nums.size()-2;i>=0;i--){
            if(nums[i] == 0){
                right[i] = 0;
            }
            else{
                right[i] = right[i+1]+1;
            }
        }
        for(int i=0;i<nums.size();i++){
            int curr_length = 1;
            if(i>0){
                curr_length += left[i-1];
            }
            if(i<nums.size()-1){
                curr_length += right[i+1];
            }
            if(curr_length>max_length){
                max_length = curr_length;
            }
        }
        return max_length;
    }
};


Link to the question: https://www.geeksforgeeks.org/length-of-longest-consecutive-ones-by-at-most-one-swap-in-a-binary-string/
