Problem Statement: Given an integer array A of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

Problem Constraints: 1 <= |A| <= 100000

Input Format: The only argument given is integer array A.

Output Format: Return the total water it is able to trap after raining.

Sample Input1: 
A = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]

Sample Output 1:
 6

CODE (C++) :

int Solution::trap(const vector<int> &A) {
    int index_highest = -1, highest = INT_MIN;
    for(int i=0;i<A.size();i++){
        if(A[i]>highest){
            highest = A[i];
            index_highest = i;
        }
    }
    int total_water = 0,Hl,Hr;
    Hr = highest;
    Hl = INT_MIN;
    for(int i=0;i<index_highest;i++){
        if(Hl<A[i]){
            Hl = A[i];
        }
        total_water += Hl-A[i];
    }
    Hl = highest;
    Hr = INT_MIN;
    for(int i=A.size()-1;i>index_highest;i--){
        if(Hr<A[i]){
            Hr = A[i];
        }
        total_water += Hr-A[i];
    }
    return total_water;
}


Link to the question: https://leetcode.com/problems/trapping-rain-water/
